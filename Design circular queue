class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


class MyCircularQueue:

    def __init__(self, k: int):
        self.head = Node(0)
        self.tail = self.head
        self.size = k
        self.k = k
        
        

    def enQueue(self, value: int) -> bool:
        curr = Node(value)
        if self.isFull():
            return False
        else:
            self.tail.next = curr
            self.tail = curr
            self.size -= 1
        return True

        
        
    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        else:
            if self.head.next:
                curr = self.head.next
                self.head.next = curr.next
                curr.next = None
                self.size += 1

                if self.head.next is None:
                    self.tail = self.head
                return True
        

    def Front(self) -> int:
        if self.head.next:
            return self.head.next.val
        else:
            return -1

    def Rear(self) -> int:
        if self.isEmpty():
            return -1
        else:
            return self.tail.val

    def isEmpty(self) -> bool:
        return self.size == self.k 
        
        
    def isFull(self) -> bool:
        return self.size == 0
