# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        # Find middle of the list
        #Keep track of pointer into first half

        slow, fast = head, head
        prev = None
        while fast and fast.next:
            fast = fast.next.next
            temp = slow.next
            slow.next = prev
            prev = slow

            slow = temp
        total = 0
        while slow:
            total = max(total, prev.val + slow.val)
            prev = prev.next
            slow = slow.next
        return total



"""
Time - O(N)
space - O(1)
"""
