class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


class MyLinkedList:
    def __init__(self):
        self.head = None


    def get(self, index: int) -> int:
        curr_node = self.head
        count = 0

        while curr_node:
            if count == index:
                return curr_node.val
            count += 1
            curr_node = curr_node.next
        return -1


    def addAtHead(self, val: int) -> None:
        node = Node(val)
        if self.head is None:
            self.head = node

        else:
            node.next = self.head
            self.head = node



    def addAtTail(self, val: int) -> None:
        node = Node(val)
        if self.head is None:
            self.head = node
            return

        curr_node = self.head
        while curr_node.next:
            curr_node = curr_node.next
        curr_node.next = node


    def addAtIndex(self, index: int, val: int) -> None:
        node = Node(val)
        curr_node = self.head
        count = 0

        if index == 0:
            self.addAtHead(val)
            return

        while curr_node and count+1 != index:
            curr_node = curr_node.next
            count += 1

        if not curr_node:
            print("Index out of bounds")
            return

        node.next = curr_node.next
        curr_node.next = node

    def print_list(self):
        if self.head == None:
            print("List is empty")

        curr_node = self.head

        while curr_node:
            print(curr_node.val, end="->")
            curr_node = curr_node.next

    def deleteAtIndex(self, index: int) -> None:
        if self.head == None:
            return

        if index == 0:
            if self.head:
                self.head = self.head.next
            else:
                print("List is empty")
            return

        count = 0

        curr_node = self.head

        while curr_node and count + 1 != index:
            curr_node = curr_node.next
            count += 1

        if not curr_node or not curr_node.next:
            print("Out of Bounds")
            return

        curr_node.next = curr_node.next.next


